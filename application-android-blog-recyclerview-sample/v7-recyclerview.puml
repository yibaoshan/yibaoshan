@startuml
class android.support.v7.widget.OpReorderer {
~ Callback mCallback
~ void reorderOps(List<UpdateOp>)
- void swapMoveOp(List<UpdateOp>,int,int)
~ void swapMoveRemove(List<UpdateOp>,int,UpdateOp,int,UpdateOp)
- void swapMoveAdd(List<UpdateOp>,int,UpdateOp,int,UpdateOp)
~ void swapMoveUpdate(List<UpdateOp>,int,UpdateOp,int,UpdateOp)
- int getLastMoveOutOfOrder(List<UpdateOp>)
}


interface android.support.v7.widget.OpReorderer$Callback {
~ UpdateOp obtainUpdateOp(int,int,int)
~ void recycleUpdateOp(UpdateOp)
}

class android.support.v7.widget.DefaultItemAnimator {
- {static} boolean DEBUG
- ArrayList<ViewHolder> mPendingRemovals
- ArrayList<ViewHolder> mPendingAdditions
- ArrayList<MoveInfo> mPendingMoves
- ArrayList<ChangeInfo> mPendingChanges
- ArrayList<ArrayList<ViewHolder>> mAdditionsList
- ArrayList<ArrayList<MoveInfo>> mMovesList
- ArrayList<ArrayList<ChangeInfo>> mChangesList
- ArrayList<ViewHolder> mAddAnimations
- ArrayList<ViewHolder> mMoveAnimations
- ArrayList<ViewHolder> mRemoveAnimations
- ArrayList<ViewHolder> mChangeAnimations
+ void runPendingAnimations()
+ boolean animateRemove(ViewHolder)
- void animateRemoveImpl(ViewHolder)
+ boolean animateAdd(ViewHolder)
- void animateAddImpl(ViewHolder)
+ boolean animateMove(ViewHolder,int,int,int,int)
- void animateMoveImpl(ViewHolder,int,int,int,int)
+ boolean animateChange(ViewHolder,ViewHolder,int,int,int,int)
- void animateChangeImpl(ChangeInfo)
- void endChangeAnimation(List<ChangeInfo>,ViewHolder)
- void endChangeAnimationIfNecessary(ChangeInfo)
- boolean endChangeAnimationIfNecessary(ChangeInfo,ViewHolder)
+ void endAnimation(ViewHolder)
+ boolean isRunning()
- void dispatchFinishedWhenDone()
+ void endAnimations()
~ void cancelAll(List<ViewHolder>)
}


class android.support.v7.widget.DefaultItemAnimator$MoveInfo {
+ ViewHolder holder
+ int fromX
}

class android.support.v7.widget.DefaultItemAnimator$ChangeInfo {
+ ViewHolder oldHolder
+ int fromX
+ String toString()
}


class android.support.v7.widget.DefaultItemAnimator$VpaListenerAdapter {
+ void onAnimationStart(View)
+ void onAnimationEnd(View)
+ void onAnimationCancel(View)
}

class android.support.v7.widget.ScrollbarHelper {
~ {static} int computeScrollOffset(RecyclerView.State,OrientationHelper,View,View,RecyclerView.LayoutManager,boolean,boolean)
~ {static} int computeScrollExtent(RecyclerView.State,OrientationHelper,View,View,RecyclerView.LayoutManager,boolean)
~ {static} int computeScrollRange(RecyclerView.State,OrientationHelper,View,View,RecyclerView.LayoutManager,boolean)
}

class android.support.v7.widget.LayoutState {
~ {static} String TAG
~ {static} int LAYOUT_START
~ {static} int LAYOUT_END
~ {static} int INVALID_LAYOUT
~ {static} int ITEM_DIRECTION_HEAD
~ {static} int ITEM_DIRECTION_TAIL
~ {static} int SCOLLING_OFFSET_NaN
~ int mAvailable
~ int mCurrentPosition
~ int mItemDirection
~ int mLayoutDirection
~ int mExtra
~ boolean hasMore(RecyclerView.State)
~ View next(RecyclerView.Recycler)
}


class android.support.v7.widget.ChildHelper {
- {static} boolean DEBUG
- {static} String TAG
~ Callback mCallback
~ Bucket mBucket
~ List<View> mHiddenViews
~ void addView(View,boolean)
~ void addView(View,int,boolean)
- int getOffset(int)
~ void removeView(View)
~ void removeViewAt(int)
~ View getChildAt(int)
~ void removeAllViewsUnfiltered()
~ View findHiddenNonRemovedView(int,int)
~ void attachViewToParent(View,int,ViewGroup.LayoutParams,boolean)
~ int getChildCount()
~ int getUnfilteredChildCount()
~ View getUnfilteredChildAt(int)
~ void detachViewFromParent(int)
~ int indexOfChild(View)
~ boolean isHidden(View)
~ void hide(View)
+ String toString()
~ boolean removeViewIfHidden(View)
}


class android.support.v7.widget.ChildHelper$Bucket {
~ {static} int BITS_PER_WORD
~ {static} long LAST_BIT
~ long mData
~ Bucket next
~ void set(int)
- void ensureNext()
~ void clear(int)
~ boolean get(int)
~ void reset()
~ void insert(int,boolean)
~ boolean remove(int)
~ int countOnesBefore(int)
+ String toString()
}


interface android.support.v7.widget.ChildHelper$Callback {
~ int getChildCount()
~ void addView(View,int)
~ int indexOfChild(View)
~ void removeViewAt(int)
~ View getChildAt(int)
~ void removeAllViews()
~ RecyclerView.ViewHolder getChildViewHolder(View)
~ void attachViewToParent(View,int,ViewGroup.LayoutParams)
~ void detachViewFromParent(int)
}

abstract class android.support.v7.widget.OrientationHelper {
- {static} int INVALID_SIZE
# RecyclerView.LayoutManager mLayoutManager
+ {static} int HORIZONTAL
+ {static} int VERTICAL
- int mLastTotalSpace
+ void onLayoutComplete()
+ int getTotalSpaceChange()
+ {abstract}int getDecoratedStart(View)
+ {abstract}int getDecoratedEnd(View)
+ {abstract}int getDecoratedMeasurement(View)
+ {abstract}int getDecoratedMeasurementInOther(View)
+ {abstract}int getStartAfterPadding()
+ {abstract}int getEndAfterPadding()
+ {abstract}int getEnd()
+ {abstract}void offsetChildren(int)
+ {abstract}int getTotalSpace()
+ {abstract}void offsetChild(View,int)
+ {abstract}int getEndPadding()
+ {static} OrientationHelper createOrientationHelper(RecyclerView.LayoutManager,int)
+ {static} OrientationHelper createHorizontalHelper(RecyclerView.LayoutManager)
+ {static} OrientationHelper createVerticalHelper(RecyclerView.LayoutManager)
}


class android.support.v7.widget.RecyclerViewAccessibilityDelegate {
~ RecyclerView mRecyclerView
~ AccessibilityDelegateCompat mItemDelegate
+ boolean performAccessibilityAction(View,int,Bundle)
+ void onInitializeAccessibilityNodeInfo(View,AccessibilityNodeInfoCompat)
+ void onInitializeAccessibilityEvent(View,AccessibilityEvent)
~ AccessibilityDelegateCompat getItemDelegate()
}


abstract class android.support.v7.widget.LinearSmoothScroller {
- {static} String TAG
- {static} boolean DEBUG
- {static} float MILLISECONDS_PER_INCH
- {static} int TARGET_SEEK_SCROLL_DISTANCE_PX
+ {static} int SNAP_TO_START
+ {static} int SNAP_TO_END
+ {static} int SNAP_TO_ANY
- {static} float TARGET_SEEK_EXTRA_SCROLL_RATIO
# LinearInterpolator mLinearInterpolator
# DecelerateInterpolator mDecelerateInterpolator
# PointF mTargetVector
- float MILLISECONDS_PER_PX
# int mInterimTargetDx
# void onStart()
# void onTargetFound(View,RecyclerView.State,Action)
# void onSeekTargetStep(int,int,RecyclerView.State,Action)
# void onStop()
# float calculateSpeedPerPixel(DisplayMetrics)
# int calculateTimeForDeceleration(int)
# int calculateTimeForScrolling(int)
# int getHorizontalSnapPreference()
# int getVerticalSnapPreference()
# void updateActionForInterimTarget(Action)
- int clampApplyScroll(int,int)
+ int calculateDtToFit(int,int,int,int,int)
+ int calculateDyToMakeVisible(View,int)
+ int calculateDxToMakeVisible(View,int)
+ {abstract}PointF computeScrollVectorForPosition(int)
}


class android.support.v7.widget.StaggeredGridLayoutManager {
+ {static} String TAG
- {static} boolean DEBUG
+ {static} int HORIZONTAL
+ {static} int VERTICAL
+ {static} int GAP_HANDLING_NONE
+ {static} int GAP_HANDLING_LAZY
+ {static} int GAP_HANDLING_MOVE_ITEMS_BETWEEN_SPANS
- {static} int INVALID_OFFSET
- int mSpanCount
- Span[] mSpans
~ OrientationHelper mPrimaryOrientation
~ OrientationHelper mSecondaryOrientation
- int mOrientation
- int mSizePerSpan
- LayoutState mLayoutState
- boolean mReverseLayout
~ boolean mShouldReverseLayout
- BitSet mRemainingSpans
~ int mPendingScrollPosition
~ int mPendingScrollPositionOffset
~ LazySpanLookup mLazySpanLookup
- int mGapStrategy
- boolean mLastLayoutFromEnd
- boolean mLastLayoutRTL
- SavedState mPendingSavedState
- int mFullSizeSpec
- AnchorInfo mAnchorInfo
- boolean mLaidOutInvalidFullSpan
- boolean mSmoothScrollbarEnabled
- Runnable checkForGapsRunnable
- void checkForGaps()
+ void onScrollStateChanged(int)
+ void onDetachedFromWindow(RecyclerView,RecyclerView.Recycler)
~ View hasGapsToFix()
- boolean checkSpanForGap(Span)
+ void setSpanCount(int)
+ void setOrientation(int)
+ void setReverseLayout(boolean)
+ int getGapStrategy()
+ void setGapStrategy(int)
+ void assertNotInLayoutOrScroll(String)
+ int getSpanCount()
+ void invalidateSpanAssignments()
- void ensureOrientationHelper()
- void resolveShouldLayoutReverse()
~ boolean isLayoutRTL()
+ boolean getReverseLayout()
+ void onLayoutChildren(RecyclerView.Recycler,RecyclerView.State)
- void applyPendingSavedState(AnchorInfo)
~ void updateAnchorInfoForLayout(RecyclerView.State,AnchorInfo)
- boolean updateAnchorFromChildren(RecyclerView.State,AnchorInfo)
~ boolean updateAnchorFromPendingData(RecyclerView.State,AnchorInfo)
~ void updateMeasureSpecs()
+ boolean supportsPredictiveItemAnimations()
+ int[] findFirstVisibleItemPositions(int[])
+ int[] findFirstCompletelyVisibleItemPositions(int[])
+ int[] findLastVisibleItemPositions(int[])
+ int[] findLastCompletelyVisibleItemPositions(int[])
+ int computeHorizontalScrollOffset(RecyclerView.State)
- int computeScrollOffset(RecyclerView.State)
+ int computeVerticalScrollOffset(RecyclerView.State)
+ int computeHorizontalScrollExtent(RecyclerView.State)
- int computeScrollExtent(RecyclerView.State)
+ int computeVerticalScrollExtent(RecyclerView.State)
+ int computeHorizontalScrollRange(RecyclerView.State)
- int computeScrollRange(RecyclerView.State)
+ int computeVerticalScrollRange(RecyclerView.State)
- void measureChildWithDecorationsAndMargin(View,LayoutParams)
- void measureChildWithDecorationsAndMargin(View,int,int)
- int updateSpecWithExtra(int,int,int)
+ void onRestoreInstanceState(Parcelable)
+ Parcelable onSaveInstanceState()
+ void onInitializeAccessibilityNodeInfoForItem(RecyclerView.Recycler,RecyclerView.State,View,AccessibilityNodeInfoCompat)
+ void onInitializeAccessibilityEvent(AccessibilityEvent)
~ int findFirstVisibleItemPositionInt()
+ int getRowCountForAccessibility(RecyclerView.Recycler,RecyclerView.State)
+ int getColumnCountForAccessibility(RecyclerView.Recycler,RecyclerView.State)
~ View findFirstVisibleItemClosestToStart(boolean)
~ View findFirstVisibleItemClosestToEnd(boolean)
- void fixEndGap(RecyclerView.Recycler,RecyclerView.State,boolean)
- void fixStartGap(RecyclerView.Recycler,RecyclerView.State,boolean)
- void updateLayoutStateToFillStart(int,RecyclerView.State)
- void updateLayoutStateToFillEnd(int,RecyclerView.State)
+ void offsetChildrenHorizontal(int)
+ void offsetChildrenVertical(int)
+ void onItemsRemoved(RecyclerView,int,int)
+ void onItemsAdded(RecyclerView,int,int)
+ void onItemsChanged(RecyclerView)
+ void onItemsMoved(RecyclerView,int,int,int)
+ void onItemsUpdated(RecyclerView,int,int)
- void handleUpdate(int,int,int)
- int fill(RecyclerView.Recycler,LayoutState,RecyclerView.State)
- LazySpanLookup.FullSpanItem createFullSpanItemFromEnd(int)
- LazySpanLookup.FullSpanItem createFullSpanItemFromStart(int)
- void attachViewToSpans(View,LayoutParams,LayoutState)
- void recycle(RecyclerView.Recycler,LayoutState,Span,int)
- void appendViewToAllSpans(View)
- void prependViewToAllSpans(View)
- void layoutDecoratedWithMargins(View,int,int,int,int)
- void updateAllRemainingSpans(int,int)
- void updateRemainingSpans(Span,int,int)
- int getMaxStart(int)
- int getMinStart(int)
- int getMaxEnd(int)
- int getMinEnd(int)
- void recycleFromStart(RecyclerView.Recycler,int)
- void recycleFromEnd(RecyclerView.Recycler,int)
- boolean preferLastSpan(int)
- Span getNextSpan(LayoutState)
+ boolean canScrollVertically()
+ boolean canScrollHorizontally()
+ int scrollHorizontallyBy(int,RecyclerView.Recycler,RecyclerView.State)
+ int scrollVerticallyBy(int,RecyclerView.Recycler,RecyclerView.State)
- int calculateScrollDirectionForPosition(int)
+ void smoothScrollToPosition(RecyclerView,RecyclerView.State,int)
+ void scrollToPosition(int)
+ void scrollToPositionWithOffset(int,int)
~ int scrollBy(int,RecyclerView.Recycler,RecyclerView.State)
- int getLastChildPosition()
- int getFirstChildPosition()
- int findFirstReferenceChildPosition(int)
- int findLastReferenceChildPosition(int)
+ RecyclerView.LayoutParams generateDefaultLayoutParams()
+ RecyclerView.LayoutParams generateLayoutParams(Context,AttributeSet)
+ RecyclerView.LayoutParams generateLayoutParams(ViewGroup.LayoutParams)
+ boolean checkLayoutParams(RecyclerView.LayoutParams)
+ int getOrientation()
}


class android.support.v7.widget.StaggeredGridLayoutManager$LayoutParams {
+ {static} int INVALID_SPAN_ID
~ Span mSpan
~ boolean mFullSpan
+ void setFullSpan(boolean)
+ boolean isFullSpan()
+ int getSpanIndex()
}


class android.support.v7.widget.StaggeredGridLayoutManager$Span {
~ {static} int INVALID_LINE
- ArrayList<View> mViews
~ int mCachedStart
~ int mCachedEnd
~ int mDeletedSize
~ int mIndex
~ int getStartLine(int)
~ void calculateCachedStart()
~ int getStartLine()
~ int getEndLine(int)
~ void calculateCachedEnd()
~ int getEndLine()
~ void prependToSpan(View)
~ void appendToSpan(View)
~ void cacheReferenceLineAndClear(boolean,int)
~ void clear()
~ void invalidateCache()
~ void setLine(int)
~ void popEnd()
~ void popStart()
+ int getDeletedSize()
~ LayoutParams getLayoutParams(View)
~ void onOffset(int)
~ int getNormalizedOffset(int,int,int)
~ boolean isEmpty(int,int)
+ int findFirstVisibleItemPosition()
+ int findFirstCompletelyVisibleItemPosition()
+ int findLastVisibleItemPosition()
+ int findLastCompletelyVisibleItemPosition()
~ int findOneVisibleChild(int,int,boolean)
}


class android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup {
- {static} int MIN_SIZE
~ int[] mData
~ int mAdapterSize
~ List<FullSpanItem> mFullSpanItems
~ int forceInvalidateAfter(int)
~ int invalidateAfter(int)
~ int getSpan(int)
~ void setSpan(int,Span)
~ int sizeForPosition(int)
~ void ensureSize(int)
~ void clear()
~ void offsetForRemoval(int,int)
- void offsetFullSpansForRemoval(int,int)
~ void offsetForAddition(int,int)
- void offsetFullSpansForAddition(int,int)
- int invalidateFullSpansAfter(int)
+ void addFullSpanItem(FullSpanItem)
+ FullSpanItem getFullSpanItem(int)
+ FullSpanItem getFirstFullSpanItemInRange(int,int,int)
}


class android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem {
~ int mPosition
~ int mGapDir
~ int[] mGapPerSpan
+ {static} Parcelable.Creator<FullSpanItem> CREATOR
~ int getGapForSpan(int)
+ void invalidateSpanGaps()
+ int describeContents()
+ void writeToParcel(Parcel,int)
+ String toString()
}


class android.support.v7.widget.StaggeredGridLayoutManager$SavedState {
~ int mAnchorPosition
~ int mVisibleAnchorPosition
~ int mSpanOffsetsSize
~ int[] mSpanOffsets
~ int mSpanLookupSize
~ int[] mSpanLookup
~ List<LazySpanLookup.FullSpanItem> mFullSpanItems
~ boolean mReverseLayout
~ boolean mAnchorLayoutFromEnd
~ boolean mLastLayoutRTL
+ {static} Parcelable.Creator<SavedState> CREATOR
~ void invalidateSpanInfo()
~ void invalidateAnchorPositionInfo()
+ int describeContents()
+ void writeToParcel(Parcel,int)
}


class android.support.v7.widget.StaggeredGridLayoutManager$AnchorInfo {
~ int mPosition
~ int mOffset
~ boolean mLayoutFromEnd
~ boolean mInvalidateOffsets
~ void reset()
~ void assignCoordinateFromPadding()
~ void assignCoordinateFromPadding(int)
}


class android.support.v7.widget.LinearLayoutManager {
- {static} String TAG
- {static} boolean DEBUG
+ {static} int HORIZONTAL
+ {static} int VERTICAL
+ {static} int INVALID_OFFSET
- {static} float MAX_SCROLL_FACTOR
~ int mOrientation
- LayoutState mLayoutState
~ OrientationHelper mOrientationHelper
- boolean mLastStackFromEnd
- boolean mReverseLayout
~ boolean mShouldReverseLayout
- boolean mStackFromEnd
- boolean mSmoothScrollbarEnabled
~ int mPendingScrollPosition
~ int mPendingScrollPositionOffset
- boolean mRecycleChildrenOnDetach
~ SavedState mPendingSavedState
~ AnchorInfo mAnchorInfo
+ RecyclerView.LayoutParams generateDefaultLayoutParams()
+ boolean getRecycleChildrenOnDetach()
+ void setRecycleChildrenOnDetach(boolean)
+ void onDetachedFromWindow(RecyclerView,RecyclerView.Recycler)
+ void onInitializeAccessibilityEvent(AccessibilityEvent)
+ Parcelable onSaveInstanceState()
+ void onRestoreInstanceState(Parcelable)
+ boolean canScrollHorizontally()
+ boolean canScrollVertically()
+ void setStackFromEnd(boolean)
+ boolean getStackFromEnd()
+ int getOrientation()
+ void setOrientation(int)
- void resolveShouldLayoutReverse()
+ boolean getReverseLayout()
+ void setReverseLayout(boolean)
+ View findViewByPosition(int)
# int getExtraLayoutSpace(RecyclerView.State)
+ void smoothScrollToPosition(RecyclerView,RecyclerView.State,int)
+ PointF computeScrollVectorForPosition(int)
+ void onLayoutChildren(RecyclerView.Recycler,RecyclerView.State)
~ void onAnchorReady(RecyclerView.State,AnchorInfo)
- void layoutForPredictiveAnimations(RecyclerView.Recycler,RecyclerView.State,int,int)
- void updateAnchorInfoForLayout(RecyclerView.State,AnchorInfo)
- boolean updateAnchorFromChildren(RecyclerView.State,AnchorInfo)
- boolean updateAnchorFromPendingData(RecyclerView.State,AnchorInfo)
- int fixLayoutEndGap(int,RecyclerView.Recycler,RecyclerView.State,boolean)
- int fixLayoutStartGap(int,RecyclerView.Recycler,RecyclerView.State,boolean)
- void updateLayoutStateToFillEnd(AnchorInfo)
- void updateLayoutStateToFillEnd(int,int)
- void updateLayoutStateToFillStart(AnchorInfo)
- void updateLayoutStateToFillStart(int,int)
# boolean isLayoutRTL()
~ void ensureLayoutState()
+ void scrollToPosition(int)
+ void scrollToPositionWithOffset(int,int)
+ int scrollHorizontallyBy(int,RecyclerView.Recycler,RecyclerView.State)
+ int scrollVerticallyBy(int,RecyclerView.Recycler,RecyclerView.State)
+ int computeHorizontalScrollOffset(RecyclerView.State)
+ int computeVerticalScrollOffset(RecyclerView.State)
+ int computeHorizontalScrollExtent(RecyclerView.State)
+ int computeVerticalScrollExtent(RecyclerView.State)
+ int computeHorizontalScrollRange(RecyclerView.State)
+ int computeVerticalScrollRange(RecyclerView.State)
- int computeScrollOffset(RecyclerView.State)
- int computeScrollExtent(RecyclerView.State)
- int computeScrollRange(RecyclerView.State)
+ void setSmoothScrollbarEnabled(boolean)
+ boolean isSmoothScrollbarEnabled()
- void updateLayoutState(int,int,boolean,RecyclerView.State)
~ int scrollBy(int,RecyclerView.Recycler,RecyclerView.State)
+ void assertNotInLayoutOrScroll(String)
- void recycleChildren(RecyclerView.Recycler,int,int)
- void recycleViewsFromStart(RecyclerView.Recycler,int)
- void recycleViewsFromEnd(RecyclerView.Recycler,int)
- void recycleByLayoutState(RecyclerView.Recycler,LayoutState)
~ int fill(RecyclerView.Recycler,LayoutState,RecyclerView.State,boolean)
~ void layoutChunk(RecyclerView.Recycler,RecyclerView.State,LayoutState,LayoutChunkResult)
- int convertFocusDirectionToLayoutDirection(int)
- View getChildClosestToStart()
- View getChildClosestToEnd()
- View findReferenceChildClosestToEnd(RecyclerView.State)
- View findReferenceChildClosestToStart(RecyclerView.State)
- View findFirstReferenceChild(int)
- View findLastReferenceChild(int)
- View findReferenceChild(int,int,int)
+ int findFirstVisibleItemPosition()
+ int findFirstCompletelyVisibleItemPosition()
+ int findLastVisibleItemPosition()
+ int findLastCompletelyVisibleItemPosition()
~ View findOneVisibleChild(int,int,boolean)
+ View onFocusSearchFailed(View,int,RecyclerView.Recycler,RecyclerView.State)
- void logChildren()
~ void validateChildOrder()
+ boolean supportsPredictiveItemAnimations()
}


class android.support.v7.widget.LinearLayoutManager$LayoutState {
~ {static} String TAG
~ {static} int LAYOUT_START
~ {static} int LAYOUT_END
~ {static} int INVALID_LAYOUT
~ {static} int ITEM_DIRECTION_HEAD
~ {static} int ITEM_DIRECTION_TAIL
~ {static} int SCOLLING_OFFSET_NaN
~ boolean mRecycle
~ int mOffset
~ int mAvailable
~ int mCurrentPosition
~ int mItemDirection
~ int mLayoutDirection
~ int mScrollingOffset
~ int mExtra
~ boolean mIsPreLayout
~ List<RecyclerView.ViewHolder> mScrapList
~ boolean hasMore(RecyclerView.State)
~ View next(RecyclerView.Recycler)
- View nextFromLimitedList()
~ void log()
}


class android.support.v7.widget.LinearLayoutManager$SavedState {
~ int mAnchorPosition
~ int mAnchorOffset
~ boolean mAnchorLayoutFromEnd
+ {static} Parcelable.Creator<SavedState> CREATOR
~ boolean hasValidAnchor()
~ void invalidateAnchor()
+ int describeContents()
+ void writeToParcel(Parcel,int)
}


class android.support.v7.widget.LinearLayoutManager$AnchorInfo {
~ int mPosition
~ int mCoordinate
~ boolean mLayoutFromEnd
~ void reset()
~ void assignCoordinateFromPadding()
+ String toString()
+ boolean assignFromViewIfValid(View,RecyclerView.State)
+ void assignFromView(View)
}


class android.support.v7.widget.LinearLayoutManager$LayoutChunkResult {
+ int mConsumed
+ boolean mFinished
+ boolean mIgnoreConsumed
+ boolean mFocusable
~ void resetInternal()
}


class android.support.v7.widget.GridLayoutManager {
- {static} boolean DEBUG
- {static} String TAG
+ {static} int DEFAULT_SPAN_COUNT
~ {static} int MAIN_DIR_SPEC
~ int mSpanCount
~ int mSizePerSpan
~ View[] mSet
~ SparseIntArray mPreLayoutSpanSizeCache
~ SparseIntArray mPreLayoutSpanIndexCache
~ SpanSizeLookup mSpanSizeLookup
~ Rect mDecorInsets
+ void setStackFromEnd(boolean)
+ int getRowCountForAccessibility(RecyclerView.Recycler,RecyclerView.State)
+ int getColumnCountForAccessibility(RecyclerView.Recycler,RecyclerView.State)
+ void onInitializeAccessibilityNodeInfoForItem(RecyclerView.Recycler,RecyclerView.State,View,AccessibilityNodeInfoCompat)
+ void onLayoutChildren(RecyclerView.Recycler,RecyclerView.State)
- void clearPreLayoutSpanMappingCache()
- void cachePreLayoutSpanMapping()
+ void onItemsAdded(RecyclerView,int,int)
+ void onItemsChanged(RecyclerView)
+ void onItemsRemoved(RecyclerView,int,int)
+ void onItemsUpdated(RecyclerView,int,int)
+ void onItemsMoved(RecyclerView,int,int,int)
+ RecyclerView.LayoutParams generateDefaultLayoutParams()
+ RecyclerView.LayoutParams generateLayoutParams(Context,AttributeSet)
+ RecyclerView.LayoutParams generateLayoutParams(ViewGroup.LayoutParams)
+ boolean checkLayoutParams(RecyclerView.LayoutParams)
+ void setSpanSizeLookup(SpanSizeLookup)
+ SpanSizeLookup getSpanSizeLookup()
- void updateMeasurements()
~ void onAnchorReady(RecyclerView.State,AnchorInfo)
- void ensureAnchorIsInFirstSpan(AnchorInfo)
- int getSpanGroupIndex(RecyclerView.Recycler,RecyclerView.State,int)
- int getSpanIndex(RecyclerView.Recycler,RecyclerView.State,int)
- int getSpanSize(RecyclerView.Recycler,RecyclerView.State,int)
~ void layoutChunk(RecyclerView.Recycler,RecyclerView.State,LayoutState,LayoutChunkResult)
- int getMainDirSpec(int)
- void measureChildWithDecorationsAndMargin(View,int,int)
- int updateSpecWithExtra(int,int,int)
- void assignSpans(RecyclerView.Recycler,RecyclerView.State,int,int,boolean)
+ int getSpanCount()
+ void setSpanCount(int)
+ boolean supportsPredictiveItemAnimations()
}


abstract class android.support.v7.widget.GridLayoutManager$SpanSizeLookup {
~ SparseIntArray mSpanIndexCache
- boolean mCacheSpanIndices
+ {abstract}int getSpanSize(int)
+ void setSpanIndexCacheEnabled(boolean)
+ void invalidateSpanIndexCache()
+ boolean isSpanIndexCacheEnabled()
~ int getCachedSpanIndex(int,int)
+ int getSpanIndex(int,int)
~ int findReferenceIndexFromCache(int)
+ int getSpanGroupIndex(int,int)
}


class android.support.v7.widget.GridLayoutManager$DefaultSpanSizeLookup {
+ int getSpanSize(int)
+ int getSpanIndex(int,int)
}

class android.support.v7.widget.GridLayoutManager$LayoutParams {
+ {static} int INVALID_SPAN_ID
- int mSpanIndex
- int mSpanSize
+ int getSpanIndex()
+ int getSpanSize()
}


class android.support.v7.widget.AdapterHelper {
~ {static} int POSITION_TYPE_INVISIBLE
~ {static} int POSITION_TYPE_NEW_OR_LAID_OUT
- {static} boolean DEBUG
- {static} String TAG
- Pools.Pool<UpdateOp> mUpdateOpPool
~ ArrayList<UpdateOp> mPendingUpdates
~ ArrayList<UpdateOp> mPostponedList
~ Callback mCallback
~ Runnable mOnItemProcessedCallback
~ boolean mDisableRecycler
~ OpReorderer mOpReorderer
~ AdapterHelper addUpdateOp(UpdateOp)
~ void reset()
~ void preProcess()
~ void consumePostponedUpdates()
- void applyMove(UpdateOp)
- void applyRemove(UpdateOp)
- void applyUpdate(UpdateOp)
- void dispatchAndUpdateViewHolders(UpdateOp)
~ void dispatchFirstPassAndUpdateViewHolders(UpdateOp,int)
- int updatePositionWithPostponed(int,int)
- boolean canFindInPreLayout(int)
- void applyAdd(UpdateOp)
- void postponeAndUpdateViewHolders(UpdateOp)
~ boolean hasPendingUpdates()
~ int findPositionOffset(int)
~ int findPositionOffset(int,int)
~ boolean onItemRangeChanged(int,int)
~ boolean onItemRangeInserted(int,int)
~ boolean onItemRangeRemoved(int,int)
~ boolean onItemRangeMoved(int,int,int)
~ void consumeUpdatesInOnePass()
+ UpdateOp obtainUpdateOp(int,int,int)
+ void recycleUpdateOp(UpdateOp)
~ void recycleUpdateOpsAndClearList(List<UpdateOp>)
}


class android.support.v7.widget.AdapterHelper$UpdateOp {
~ {static} int ADD
~ {static} int REMOVE
~ {static} int UPDATE
~ {static} int MOVE
~ {static} int POOL_SIZE
~ int cmd
~ int positionStart
~ int itemCount
~ String cmdToString()
+ String toString()
+ boolean equals(Object)
+ int hashCode()
}


interface android.support.v7.widget.AdapterHelper$Callback {
~ ViewHolder findViewHolder(int)
~ void offsetPositionsForRemovingInvisible(int,int)
~ void offsetPositionsForRemovingLaidOutOrNewView(int,int)
~ void markViewHoldersUpdated(int,int)
~ void onDispatchFirstPass(UpdateOp)
~ void onDispatchSecondPass(UpdateOp)
~ void offsetPositionsForAdd(int,int)
~ void offsetPositionsForMove(int,int)
}

class android.support.v7.widget.RecyclerView {
- {static} String TAG
- {static} boolean DEBUG
- {static} boolean FORCE_INVALIDATE_DISPLAY_LIST
- {static} boolean DISPATCH_TEMP_DETACH
+ {static} int HORIZONTAL
+ {static} int VERTICAL
+ {static} int NO_POSITION
+ {static} long NO_ID
+ {static} int INVALID_TYPE
- {static} int MAX_SCROLL_DURATION
- RecyclerViewDataObserver mObserver
~ Recycler mRecycler
- SavedState mPendingSavedState
~ AdapterHelper mAdapterHelper
~ ChildHelper mChildHelper
~ List<View> mDisappearingViewsInLayoutPass
- boolean mClipToPadding
- Runnable mUpdateChildViewsRunnable
- Rect mTempRect
- Adapter mAdapter
- LayoutManager mLayout
- RecyclerListener mRecyclerListener
- ArrayList<ItemDecoration> mItemDecorations
- ArrayList<OnItemTouchListener> mOnItemTouchListeners
- OnItemTouchListener mActiveOnItemTouchListener
- boolean mIsAttached
- boolean mHasFixedSize
- boolean mFirstLayoutComplete
- boolean mEatRequestLayout
- boolean mLayoutRequestEaten
- boolean mAdapterUpdateDuringMeasure
- boolean mPostUpdatesOnAnimation
- AccessibilityManager mAccessibilityManager
- boolean mDataSetHasChangedAfterLayout
- boolean mRunningLayoutOrScroll
- EdgeEffectCompat mLeftGlow
~ ItemAnimator mItemAnimator
- {static} int INVALID_POINTER
+ {static} int SCROLL_STATE_IDLE
+ {static} int SCROLL_STATE_DRAGGING
+ {static} int SCROLL_STATE_SETTLING
- int mScrollState
- int mScrollPointerId
- VelocityTracker mVelocityTracker
- int mInitialTouchX
- int mInitialTouchY
- int mLastTouchX
- int mLastTouchY
- int mTouchSlop
- int mMinFlingVelocity
- int mMaxFlingVelocity
- ViewFlinger mViewFlinger
~ State mState
- OnScrollListener mScrollListener
~ boolean mItemsAddedOrRemoved
~ boolean mItemsChanged
- ItemAnimator.ItemAnimatorListener mItemAnimatorListener
- boolean mPostedAnimatorRunner
- RecyclerViewAccessibilityDelegate mAccessibilityDelegate
- Runnable mItemAnimatorRunner
- {static} Interpolator sQuinticInterpolator
+ RecyclerViewAccessibilityDelegate getCompatAccessibilityDelegate()
+ void setAccessibilityDelegateCompat(RecyclerViewAccessibilityDelegate)
- void initChildrenHelper()
~ void initAdapterManager()
+ void setHasFixedSize(boolean)
+ boolean hasFixedSize()
+ void setClipToPadding(boolean)
+ void swapAdapter(Adapter,boolean)
+ void setAdapter(Adapter)
- void setAdapterInternal(Adapter,boolean,boolean)
+ Adapter getAdapter()
+ void setRecyclerListener(RecyclerListener)
+ void setLayoutManager(LayoutManager)
# Parcelable onSaveInstanceState()
# void onRestoreInstanceState(Parcelable)
- void addAnimatingView(View)
- void removeAnimatingView(View)
+ LayoutManager getLayoutManager()
+ RecycledViewPool getRecycledViewPool()
+ void setRecycledViewPool(RecycledViewPool)
+ void setViewCacheExtension(ViewCacheExtension)
+ void setItemViewCacheSize(int)
+ int getScrollState()
- void setScrollState(int)
+ void addItemDecoration(ItemDecoration,int)
+ void addItemDecoration(ItemDecoration)
+ void removeItemDecoration(ItemDecoration)
+ void setOnScrollListener(OnScrollListener)
+ void scrollToPosition(int)
+ void smoothScrollToPosition(int)
+ void scrollTo(int,int)
+ void scrollBy(int,int)
- void consumePendingUpdateOperations()
~ void scrollByInternal(int,int)
# int computeHorizontalScrollOffset()
# int computeHorizontalScrollExtent()
# int computeHorizontalScrollRange()
# int computeVerticalScrollOffset()
# int computeVerticalScrollExtent()
# int computeVerticalScrollRange()
~ void eatRequestLayout()
~ void resumeRequestLayout(boolean)
+ void smoothScrollBy(int,int)
+ boolean fling(int,int)
+ void stopScroll()
- void stopScrollersInternal()
- void pullGlows(int,int)
- void releaseGlows()
- void considerReleasingGlowsOnScroll(int,int)
~ void absorbGlows(int,int)
~ void ensureLeftGlow()
~ void ensureRightGlow()
~ void ensureTopGlow()
~ void ensureBottomGlow()
~ void invalidateGlows()
+ View focusSearch(View,int)
+ void requestChildFocus(View,View)
+ boolean requestChildRectangleOnScreen(View,Rect,boolean)
+ void addFocusables(ArrayList<View>,int,int)
# void onAttachedToWindow()
# void onDetachedFromWindow()
~ void assertInLayoutOrScroll(String)
~ void assertNotInLayoutOrScroll(String)
+ void addOnItemTouchListener(OnItemTouchListener)
+ void removeOnItemTouchListener(OnItemTouchListener)
- boolean dispatchOnItemTouchIntercept(MotionEvent)
- boolean dispatchOnItemTouch(MotionEvent)
+ boolean onInterceptTouchEvent(MotionEvent)
+ boolean onTouchEvent(MotionEvent)
- void cancelTouch()
- void onPointerUp(MotionEvent)
# void onMeasure(int,int)
# void onSizeChanged(int,int,int,int)
+ void setItemAnimator(ItemAnimator)
+ ItemAnimator getItemAnimator()
- boolean supportsChangeAnimations()
- void postAnimationRunner()
- boolean predictiveItemAnimationsEnabled()
- void processAdapterUpdatesAndSetAnimationFlags()
~ void dispatchLayout()
~ long getChangedHolderKey(ViewHolder)
- void processDisappearingList(ArrayMap<View,Rect>)
- void animateAppearance(ViewHolder,Rect,int,int)
- void animateDisappearance(ItemHolderInfo)
- void animateChange(ViewHolder,ViewHolder)
# void onLayout(boolean,int,int,int,int)
+ void requestLayout()
~ void markItemDecorInsetsDirty()
+ void draw(Canvas)
+ void onDraw(Canvas)
# boolean checkLayoutParams(ViewGroup.LayoutParams)
# ViewGroup.LayoutParams generateDefaultLayoutParams()
+ ViewGroup.LayoutParams generateLayoutParams(AttributeSet)
# ViewGroup.LayoutParams generateLayoutParams(ViewGroup.LayoutParams)
~ void saveOldPositions()
~ void clearOldPositions()
~ void offsetPositionRecordsForMove(int,int)
~ void offsetPositionRecordsForInsert(int,int)
~ void offsetPositionRecordsForRemove(int,int,boolean)
~ void viewRangeUpdate(int,int)
~ void rebindUpdatedViewHolders()
~ void markKnownViewsInvalid()
+ void invalidateItemDecorations()
+ ViewHolder getChildViewHolder(View)
~ {static} ViewHolder getChildViewHolderInt(View)
+ int getChildPosition(View)
+ long getChildItemId(View)
+ ViewHolder findViewHolderForPosition(int)
~ ViewHolder findViewHolderForPosition(int,boolean)
+ ViewHolder findViewHolderForItemId(long)
+ View findChildViewUnder(float,float)
+ void offsetChildrenVertical(int)
+ void onChildAttachedToWindow(View)
+ void onChildDetachedFromWindow(View)
+ void offsetChildrenHorizontal(int)
~ Rect getItemDecorInsetsForChild(View)
- void dispatchChildDetached(View)
- void dispatchChildAttached(View)
- void removeFromDisappearingList(View)
- void addToDisappearingList(View)
}


class android.support.v7.widget.RecyclerView$ViewFlinger {
- int mLastFlingX
- int mLastFlingY
- ScrollerCompat mScroller
- Interpolator mInterpolator
- boolean mEatRunOnAnimationRequest
- boolean mReSchedulePostAnimationCallback
+ void run()
- void disableRunOnAnimationRequests()
- void enableRunOnAnimationRequests()
~ void postOnAnimation()
+ void fling(int,int)
+ void smoothScrollBy(int,int)
+ void smoothScrollBy(int,int,int,int)
- float distanceInfluenceForSnapDuration(float)
- int computeScrollDuration(int,int,int,int)
+ void smoothScrollBy(int,int,int)
+ void smoothScrollBy(int,int,int,Interpolator)
+ void stop()
}


class android.support.v7.widget.RecyclerView$RecyclerViewDataObserver {
+ void onChanged()
+ void onItemRangeChanged(int,int)
+ void onItemRangeInserted(int,int)
+ void onItemRangeRemoved(int,int)
+ void onItemRangeMoved(int,int,int)
~ void triggerUpdateProcessor()
}

class android.support.v7.widget.RecyclerView$RecycledViewPool {
- SparseArray<ArrayList<ViewHolder>> mScrap
- SparseIntArray mMaxScrap
- int mAttachCount
- {static} int DEFAULT_MAX_SCRAP
+ void clear()
+ void setMaxRecycledViews(int,int)
+ ViewHolder getRecycledView(int)
~ int size()
+ void putRecycledView(ViewHolder)
~ void attach(Adapter)
~ void detach()
~ void onAdapterChanged(Adapter,Adapter,boolean)
- ArrayList<ViewHolder> getScrapHeapForType(int)
}


class android.support.v7.widget.RecyclerView$Recycler {
~ ArrayList<ViewHolder> mAttachedScrap
- ArrayList<ViewHolder> mChangedScrap
~ ArrayList<ViewHolder> mCachedViews
- List<ViewHolder> mUnmodifiableAttachedScrap
- int mViewCacheMax
- RecycledViewPool mRecyclerPool
- ViewCacheExtension mViewCacheExtension
- {static} int DEFAULT_CACHE_SIZE
+ void clear()
+ void setViewCacheSize(int)
+ List<ViewHolder> getScrapList()
~ boolean validateViewHolderForOffsetPosition(ViewHolder)
+ void bindViewToPosition(View,int)
+ int convertPreLayoutPositionToPostLayout(int)
+ View getViewForPosition(int)
~ View getViewForPosition(int,boolean)
- void attachAccessibilityDelegate(View)
- void invalidateDisplayListInt(ViewHolder)
- void invalidateDisplayListInt(ViewGroup,boolean)
+ void recycleView(View)
~ void recycleViewInternal(View)
~ void recycleAndClearCachedViews()
~ boolean tryToRecycleCachedViewAt(int)
~ void recycleViewHolderInternal(ViewHolder)
~ void quickRecycleScrapView(View)
~ void scrapView(View)
~ void unscrapView(ViewHolder)
~ int getScrapCount()
~ View getScrapViewAt(int)
~ void clearScrap()
~ ViewHolder getChangedScrapViewForPosition(int)
~ ViewHolder getScrapViewForPosition(int,int,boolean)
~ ViewHolder getScrapViewForId(long,int,boolean)
~ void dispatchViewRecycled(ViewHolder)
~ void onAdapterChanged(Adapter,Adapter,boolean)
~ void offsetPositionRecordsForMove(int,int)
~ void offsetPositionRecordsForInsert(int,int)
~ void offsetPositionRecordsForRemove(int,int,boolean)
~ void setViewCacheExtension(ViewCacheExtension)
~ void setRecycledViewPool(RecycledViewPool)
~ RecycledViewPool getRecycledViewPool()
~ void viewRangeUpdate(int,int)
~ void markKnownViewsInvalid()
~ void clearOldPositions()
~ void markItemDecorInsetsDirty()
}


abstract class android.support.v7.widget.RecyclerView$ViewCacheExtension {
+ {abstract}View getViewForPositionAndType(Recycler,int,int)
}

abstract class android.support.v7.widget.RecyclerView$Adapter {
- AdapterDataObservable mObservable
- boolean mHasStableIds
+ {abstract}VH onCreateViewHolder(ViewGroup,int)
+ {abstract}void onBindViewHolder(VH,int)
+ VH createViewHolder(ViewGroup,int)
+ void bindViewHolder(VH,int)
+ int getItemViewType(int)
+ void setHasStableIds(boolean)
+ long getItemId(int)
+ {abstract}int getItemCount()
+ boolean hasStableIds()
+ void onViewRecycled(VH)
+ void onViewAttachedToWindow(VH)
+ void onViewDetachedFromWindow(VH)
+ boolean hasObservers()
+ void registerAdapterDataObserver(AdapterDataObserver)
+ void unregisterAdapterDataObserver(AdapterDataObserver)
+ void notifyDataSetChanged()
+ void notifyItemChanged(int)
+ void notifyItemRangeChanged(int,int)
+ void notifyItemInserted(int)
+ void notifyItemMoved(int,int)
+ void notifyItemRangeInserted(int,int)
+ void notifyItemRemoved(int)
+ void notifyItemRangeRemoved(int,int)
}


abstract class android.support.v7.widget.RecyclerView$LayoutManager {
~ ChildHelper mChildHelper
~ RecyclerView mRecyclerView
~ SmoothScroller mSmoothScroller
- boolean mRequestedSimpleAnimations
~ void setRecyclerView(RecyclerView)
+ void requestLayout()
+ void assertInLayoutOrScroll(String)
+ void assertNotInLayoutOrScroll(String)
+ boolean supportsPredictiveItemAnimations()
+ void onAttachedToWindow(RecyclerView)
+ void onDetachedFromWindow(RecyclerView)
+ void onDetachedFromWindow(RecyclerView,Recycler)
+ boolean getClipToPadding()
+ void onLayoutChildren(Recycler,State)
+ {abstract}LayoutParams generateDefaultLayoutParams()
+ boolean checkLayoutParams(LayoutParams)
+ LayoutParams generateLayoutParams(ViewGroup.LayoutParams)
+ LayoutParams generateLayoutParams(Context,AttributeSet)
+ int scrollHorizontallyBy(int,Recycler,State)
+ int scrollVerticallyBy(int,Recycler,State)
+ boolean canScrollHorizontally()
+ boolean canScrollVertically()
+ void scrollToPosition(int)
+ void smoothScrollToPosition(RecyclerView,State,int)
+ void startSmoothScroll(SmoothScroller)
+ boolean isSmoothScrolling()
+ int getLayoutDirection()
+ void endAnimation(View)
+ void addDisappearingView(View)
+ void addDisappearingView(View,int)
+ void addView(View)
+ void addView(View,int)
- void addViewInt(View,int,boolean)
+ void removeView(View)
+ void removeViewAt(int)
+ void removeAllViews()
+ int getPosition(View)
+ int getItemViewType(View)
+ View findViewByPosition(int)
+ void detachView(View)
+ void detachViewAt(int)
- void detachViewInternal(int,View)
+ void attachView(View,int,LayoutParams)
+ void attachView(View,int)
+ void attachView(View)
+ void removeDetachedView(View)
+ void moveView(int,int)
+ void detachAndScrapView(View,Recycler)
+ void detachAndScrapViewAt(int,Recycler)
+ void removeAndRecycleView(View,Recycler)
+ void removeAndRecycleViewAt(int,Recycler)
+ int getChildCount()
+ View getChildAt(int)
+ int getWidth()
+ int getHeight()
+ int getPaddingLeft()
+ int getPaddingTop()
+ int getPaddingRight()
+ int getPaddingBottom()
+ int getPaddingStart()
+ int getPaddingEnd()
+ boolean isFocused()
+ boolean hasFocus()
+ View getFocusedChild()
+ int getItemCount()
+ void offsetChildrenHorizontal(int)
+ void offsetChildrenVertical(int)
+ void ignoreView(View)
+ void stopIgnoringView(View)
+ void detachAndScrapAttachedViews(Recycler)
- void scrapOrRecycleView(Recycler,int,View)
~ void removeAndRecycleScrapInt(Recycler,boolean)
+ void measureChild(View,int,int)
+ void measureChildWithMargins(View,int,int)
+ {static} int getChildMeasureSpec(int,int,int,boolean)
+ int getDecoratedMeasuredWidth(View)
+ int getDecoratedMeasuredHeight(View)
+ void layoutDecorated(View,int,int,int,int)
+ int getDecoratedLeft(View)
+ int getDecoratedTop(View)
+ int getDecoratedRight(View)
+ int getDecoratedBottom(View)
+ void calculateItemDecorationsForChild(View,Rect)
+ int getTopDecorationHeight(View)
+ int getBottomDecorationHeight(View)
+ int getLeftDecorationWidth(View)
+ int getRightDecorationWidth(View)
+ View onFocusSearchFailed(View,int,Recycler,State)
+ View onInterceptFocusSearch(View,int)
+ boolean requestChildRectangleOnScreen(RecyclerView,View,Rect,boolean)
+ boolean onRequestChildFocus(RecyclerView,View,View)
+ boolean onRequestChildFocus(RecyclerView,State,View,View)
+ void onAdapterChanged(Adapter,Adapter)
+ boolean onAddFocusables(RecyclerView,ArrayList<View>,int,int)
+ void onItemsChanged(RecyclerView)
+ void onItemsAdded(RecyclerView,int,int)
+ void onItemsRemoved(RecyclerView,int,int)
+ void onItemsUpdated(RecyclerView,int,int)
+ void onItemsMoved(RecyclerView,int,int,int)
+ int computeHorizontalScrollExtent(State)
+ int computeHorizontalScrollOffset(State)
+ int computeHorizontalScrollRange(State)
+ int computeVerticalScrollExtent(State)
+ int computeVerticalScrollOffset(State)
+ int computeVerticalScrollRange(State)
+ void onMeasure(Recycler,State,int,int)
+ void setMeasuredDimension(int,int)
+ int getMinimumWidth()
+ int getMinimumHeight()
+ Parcelable onSaveInstanceState()
+ void onRestoreInstanceState(Parcelable)
~ void stopSmoothScroller()
- void onSmoothScrollerStopped(SmoothScroller)
+ void onScrollStateChanged(int)
+ void removeAndRecycleAllViews(Recycler)
~ void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfoCompat)
+ void onInitializeAccessibilityNodeInfo(Recycler,State,AccessibilityNodeInfoCompat)
+ void onInitializeAccessibilityEvent(AccessibilityEvent)
+ void onInitializeAccessibilityEvent(Recycler,State,AccessibilityEvent)
~ void onInitializeAccessibilityNodeInfoForItem(View,AccessibilityNodeInfoCompat)
+ void onInitializeAccessibilityNodeInfoForItem(Recycler,State,View,AccessibilityNodeInfoCompat)
+ void requestSimpleAnimationsInNextLayout()
+ int getSelectionModeForAccessibility(Recycler,State)
+ int getRowCountForAccessibility(Recycler,State)
+ int getColumnCountForAccessibility(Recycler,State)
+ boolean isLayoutHierarchical(Recycler,State)
~ boolean performAccessibilityAction(int,Bundle)
+ boolean performAccessibilityAction(Recycler,State,int,Bundle)
~ boolean performAccessibilityActionForItem(View,int,Bundle)
+ boolean performAccessibilityActionForItem(Recycler,State,View,int,Bundle)
}


abstract class android.support.v7.widget.RecyclerView$ItemDecoration {
+ void onDraw(Canvas,RecyclerView,State)
+ void onDraw(Canvas,RecyclerView)
+ void onDrawOver(Canvas,RecyclerView,State)
+ void onDrawOver(Canvas,RecyclerView)
+ void getItemOffsets(Rect,int,RecyclerView)
+ void getItemOffsets(Rect,View,RecyclerView,State)
}

interface android.support.v7.widget.RecyclerView$OnItemTouchListener {
+ boolean onInterceptTouchEvent(RecyclerView,MotionEvent)
+ void onTouchEvent(RecyclerView,MotionEvent)
}

abstract class android.support.v7.widget.RecyclerView$OnScrollListener {
+ void onScrollStateChanged(RecyclerView,int)
+ void onScrolled(RecyclerView,int,int)
}

interface android.support.v7.widget.RecyclerView$RecyclerListener {
+ void onViewRecycled(ViewHolder)
}

abstract class android.support.v7.widget.RecyclerView$ViewHolder {
+ View itemView
~ int mPosition
~ int mOldPosition
~ long mItemId
~ int mItemViewType
~ int mPreLayoutPosition
~ ViewHolder mShadowedHolder
~ ViewHolder mShadowingHolder
~ {static} int FLAG_BOUND
~ {static} int FLAG_UPDATE
~ {static} int FLAG_INVALID
~ {static} int FLAG_REMOVED
~ {static} int FLAG_NOT_RECYCLABLE
~ {static} int FLAG_RETURNED_FROM_SCRAP
~ {static} int FLAG_CHANGED
~ {static} int FLAG_IGNORE
- int mFlags
- int mIsRecyclableCount
- Recycler mScrapContainer
~ void flagRemovedAndOffsetPosition(int,int,boolean)
~ void offsetPosition(int,boolean)
~ void clearOldPosition()
~ void saveOldPosition()
~ boolean shouldIgnore()
+ int getPosition()
+ int getOldPosition()
+ long getItemId()
+ int getItemViewType()
~ boolean isScrap()
~ void unScrap()
~ boolean wasReturnedFromScrap()
~ void clearReturnedFromScrapFlag()
~ void stopIgnoring()
~ void setScrapContainer(Recycler)
~ boolean isInvalid()
~ boolean needsUpdate()
~ boolean isChanged()
~ boolean isBound()
~ boolean isRemoved()
~ void setFlags(int,int)
~ void addFlags(int)
~ void resetInternal()
+ String toString()
+ void setIsRecyclable(boolean)
+ boolean isRecyclable()
}


class android.support.v7.widget.RecyclerView$LayoutParams {
~ ViewHolder mViewHolder
~ Rect mDecorInsets
~ boolean mInsetsDirty
~ boolean mPendingInvalidate
+ boolean viewNeedsUpdate()
+ boolean isViewInvalid()
+ boolean isItemRemoved()
+ boolean isItemChanged()
+ int getViewPosition()
}


abstract class android.support.v7.widget.RecyclerView$AdapterDataObserver {
+ void onChanged()
+ void onItemRangeChanged(int,int)
+ void onItemRangeInserted(int,int)
+ void onItemRangeRemoved(int,int)
+ void onItemRangeMoved(int,int,int)
}

abstract class android.support.v7.widget.RecyclerView$SmoothScroller {
- int mTargetPosition
- RecyclerView mRecyclerView
- LayoutManager mLayoutManager
- boolean mPendingInitialRun
- boolean mRunning
- View mTargetView
- Action mRecyclingAction
~ void start(RecyclerView,LayoutManager)
+ void setTargetPosition(int)
+ LayoutManager getLayoutManager()
# void stop()
+ boolean isPendingInitialRun()
+ boolean isRunning()
+ int getTargetPosition()
- void onAnimation(int,int)
+ int getChildPosition(View)
+ int getChildCount()
+ View findViewByPosition(int)
+ void instantScrollToPosition(int)
# void onChildAttachedToWindow(View)
# void normalize(PointF)
# {abstract}void onStart()
# {abstract}void onStop()
# {abstract}void onSeekTargetStep(int,int,State,Action)
# {abstract}void onTargetFound(View,State,Action)
}


class android.support.v7.widget.RecyclerView$SmoothScroller$Action {
+ {static} int UNDEFINED_DURATION
- int mDx
- int mDy
- int mDuration
- Interpolator mInterpolator
- boolean changed
- int consecutiveUpdates
- void runIfNecessary(RecyclerView)
- void validate()
+ int getDx()
+ void setDx(int)
+ int getDy()
+ void setDy(int)
+ int getDuration()
+ void setDuration(int)
+ Interpolator getInterpolator()
+ void setInterpolator(Interpolator)
+ void update(int,int,int,Interpolator)
}


class android.support.v7.widget.RecyclerView$AdapterDataObservable {
+ boolean hasObservers()
+ void notifyChanged()
+ void notifyItemRangeChanged(int,int)
+ void notifyItemRangeInserted(int,int)
+ void notifyItemRangeRemoved(int,int)
+ void notifyItemMoved(int,int)
}

class android.support.v7.widget.RecyclerView$SavedState {
~ Parcelable mLayoutState
+ {static} Parcelable.Creator<SavedState> CREATOR
+ void writeToParcel(Parcel,int)
- void copyFrom(SavedState)
}


class android.support.v7.widget.RecyclerView$State {
- int mTargetPosition
~ ArrayMap<ViewHolder,ItemHolderInfo> mPreLayoutHolderMap
~ ArrayMap<ViewHolder,ItemHolderInfo> mPostLayoutHolderMap
~ ArrayMap<Long,ViewHolder> mOldChangedHolders
- SparseArray<Object> mData
~ int mItemCount
- int mPreviousLayoutItemCount
- int mDeletedInvisibleItemCountSincePreviousLayout
- boolean mStructureChanged
- boolean mInPreLayout
- boolean mRunSimpleAnimations
- boolean mRunPredictiveAnimations
~ State reset()
+ boolean isPreLayout()
+ boolean willRunPredictiveAnimations()
+ boolean willRunSimpleAnimations()
+ void remove(int)
+ T get(int)
+ void put(int,Object)
+ int getTargetScrollPosition()
+ boolean hasTargetScrollPosition()
+ boolean didStructureChange()
+ int getItemCount()
+ void onViewRecycled(ViewHolder)
+ void onViewIgnored(ViewHolder)
- void removeFrom(ArrayMap<Long,ViewHolder>,ViewHolder)
+ String toString()
}


class android.support.v7.widget.RecyclerView$ItemAnimatorRestoreListener {
+ void onRemoveFinished(ViewHolder)
+ void onAddFinished(ViewHolder)
+ void onMoveFinished(ViewHolder)
+ void onChangeFinished(ViewHolder)
}

abstract class android.support.v7.widget.RecyclerView$ItemAnimator {
- ItemAnimatorListener mListener
- ArrayList<ItemAnimatorFinishedListener> mFinishedListeners
- long mAddDuration
- long mRemoveDuration
- long mMoveDuration
- long mChangeDuration
- boolean mSupportsChangeAnimations
+ long getMoveDuration()
+ void setMoveDuration(long)
+ long getAddDuration()
+ void setAddDuration(long)
+ long getRemoveDuration()
+ void setRemoveDuration(long)
+ long getChangeDuration()
+ void setChangeDuration(long)
+ boolean getSupportsChangeAnimations()
+ void setSupportsChangeAnimations(boolean)
~ void setListener(ItemAnimatorListener)
+ {abstract}void runPendingAnimations()
+ {abstract}boolean animateRemove(ViewHolder)
+ {abstract}boolean animateAdd(ViewHolder)
+ {abstract}boolean animateMove(ViewHolder,int,int,int,int)
+ {abstract}boolean animateChange(ViewHolder,ViewHolder,int,int,int,int)
+ void dispatchRemoveFinished(ViewHolder)
+ void dispatchMoveFinished(ViewHolder)
+ void dispatchAddFinished(ViewHolder)
+ void dispatchChangeFinished(ViewHolder,boolean)
+ void dispatchRemoveStarting(ViewHolder)
+ void dispatchMoveStarting(ViewHolder)
+ void dispatchAddStarting(ViewHolder)
+ void dispatchChangeStarting(ViewHolder,boolean)
+ {abstract}void endAnimation(ViewHolder)
+ {abstract}void endAnimations()
+ {abstract}boolean isRunning()
+ boolean isRunning(ItemAnimatorFinishedListener)
+ void dispatchAnimationsFinished()
+ void onRemoveStarting(ViewHolder)
+ void onRemoveFinished(ViewHolder)
+ void onAddStarting(ViewHolder)
+ void onAddFinished(ViewHolder)
+ void onMoveStarting(ViewHolder)
+ void onMoveFinished(ViewHolder)
+ void onChangeStarting(ViewHolder,boolean)
+ void onChangeFinished(ViewHolder,boolean)
}


interface android.support.v7.widget.RecyclerView$ItemAnimator$ItemAnimatorListener {
~ void onRemoveFinished(ViewHolder)
~ void onAddFinished(ViewHolder)
~ void onMoveFinished(ViewHolder)
~ void onChangeFinished(ViewHolder)
}

interface android.support.v7.widget.RecyclerView$ItemAnimator$ItemAnimatorFinishedListener {
~ void onAnimationsFinished()
}

class android.support.v7.widget.RecyclerView$ItemHolderInfo {
~ ViewHolder holder
~ int left
}

class android.support.v7.widget.PositionMap {
- {static} Object DELETED
- boolean mGarbage
- int[] mKeys
- Object[] mValues
- int mSize
+ PositionMap<E> clone()
+ E get(int)
+ E get(int,E)
+ void delete(int)
+ void remove(int)
+ void removeAt(int)
+ void removeAtRange(int,int)
+ void insertKeyRange(int,int)
+ void removeKeyRange(ArrayList<E>,int,int)
- void gc()
+ void put(int,E)
+ int size()
+ int keyAt(int)
+ E valueAt(int)
+ void setValueAt(int,E)
+ int indexOfKey(int)
+ int indexOfValue(E)
+ void clear()
+ void append(int,E)
+ String toString()
~ {static} int idealByteArraySize(int)
~ {static} int idealBooleanArraySize(int)
~ {static} int idealShortArraySize(int)
~ {static} int idealCharArraySize(int)
~ {static} int idealIntArraySize(int)
~ {static} int idealFloatArraySize(int)
~ {static} int idealObjectArraySize(int)
~ {static} int idealLongArraySize(int)
}


class android.support.v7.widget.PositionMap$ContainerHelpers {
~ {static} boolean[] EMPTY_BOOLEANS
~ {static} int[] EMPTY_INTS
~ {static} long[] EMPTY_LONGS
~ {static} Object[] EMPTY_OBJECTS
~ {static} int binarySearch(int[],int,int)
}




android.support.v7.widget.OpReorderer +.. android.support.v7.widget.OpReorderer$Callback
android.support.v7.widget.ItemAnimator <|-- android.support.v7.widget.DefaultItemAnimator
android.support.v7.widget.DefaultItemAnimator +.. android.support.v7.widget.DefaultItemAnimator$MoveInfo
android.support.v7.widget.DefaultItemAnimator +.. android.support.v7.widget.DefaultItemAnimator$ChangeInfo
android.support.v7.widget.DefaultItemAnimator +.. android.support.v7.widget.DefaultItemAnimator$VpaListenerAdapter
android.support.v7.widget.ViewPropertyAnimatorListener <|.. android.support.v7.widget.DefaultItemAnimator$VpaListenerAdapter
android.support.v7.widget.ChildHelper +.. android.support.v7.widget.ChildHelper$Bucket
android.support.v7.widget.ChildHelper +.. android.support.v7.widget.ChildHelper$Callback
android.support.v4.view.AccessibilityDelegateCompat <|-- android.support.v7.widget.RecyclerViewAccessibilityDelegate
android.support.v7.widget.SmoothScroller <|-- android.support.v7.widget.LinearSmoothScroller
android.support.v7.widget.LayoutManager <|-- android.support.v7.widget.StaggeredGridLayoutManager
android.support.v7.widget.StaggeredGridLayoutManager +.. android.support.v7.widget.StaggeredGridLayoutManager$LayoutParams
android.support.v7.widget.LayoutParams <|-- android.support.v7.widget.StaggeredGridLayoutManager$LayoutParams
android.support.v7.widget.StaggeredGridLayoutManager +.. android.support.v7.widget.StaggeredGridLayoutManager$Span
android.support.v7.widget.StaggeredGridLayoutManager +.. android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup
android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup +.. android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem
android.support.v7.widget.Parcelable <|.. android.support.v7.widget.StaggeredGridLayoutManager$LazySpanLookup$FullSpanItem
android.support.v7.widget.StaggeredGridLayoutManager +.. android.support.v7.widget.StaggeredGridLayoutManager$SavedState
android.support.v7.widget.Parcelable <|.. android.support.v7.widget.StaggeredGridLayoutManager$SavedState
android.support.v7.widget.StaggeredGridLayoutManager +.. android.support.v7.widget.StaggeredGridLayoutManager$AnchorInfo
android.support.v7.widget.LayoutManager <|-- android.support.v7.widget.LinearLayoutManager
android.support.v7.widget.LinearLayoutManager +.. android.support.v7.widget.LinearLayoutManager$LayoutState
android.support.v7.widget.LinearLayoutManager +.. android.support.v7.widget.LinearLayoutManager$SavedState
android.support.v7.widget.Parcelable <|.. android.support.v7.widget.LinearLayoutManager$SavedState
android.support.v7.widget.LinearLayoutManager +.. android.support.v7.widget.LinearLayoutManager$AnchorInfo
android.support.v7.widget.LinearLayoutManager +.. android.support.v7.widget.LinearLayoutManager$LayoutChunkResult
android.support.v7.widget.LinearLayoutManager <|-- android.support.v7.widget.GridLayoutManager
android.support.v7.widget.GridLayoutManager +.. android.support.v7.widget.GridLayoutManager$SpanSizeLookup
android.support.v7.widget.GridLayoutManager +.. android.support.v7.widget.GridLayoutManager$DefaultSpanSizeLookup
android.support.v7.widget.SpanSizeLookup <|-- android.support.v7.widget.GridLayoutManager$DefaultSpanSizeLookup
android.support.v7.widget.GridLayoutManager +.. android.support.v7.widget.GridLayoutManager$LayoutParams
android.support.v7.widget.LayoutParams <|-- android.support.v7.widget.GridLayoutManager$LayoutParams
android.support.v7.widget.Callback <|.. android.support.v7.widget.AdapterHelper
android.support.v7.widget.AdapterHelper +.. android.support.v7.widget.AdapterHelper$UpdateOp
android.support.v7.widget.AdapterHelper +.. android.support.v7.widget.AdapterHelper$Callback
android.view.ViewGroup <|-- android.support.v7.widget.RecyclerView
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$ViewFlinger
android.support.v7.widget.Runnable <|.. android.support.v7.widget.RecyclerView$ViewFlinger
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$RecyclerViewDataObserver
android.support.v7.widget.AdapterDataObserver <|-- android.support.v7.widget.RecyclerView$RecyclerViewDataObserver
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$RecycledViewPool
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$Recycler
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$ViewCacheExtension
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$Adapter
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$LayoutManager
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$ItemDecoration
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$OnItemTouchListener
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$OnScrollListener
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$RecyclerListener
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$ViewHolder
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$LayoutParams
android.support.v7.widget.MarginLayoutParams <|-- android.support.v7.widget.RecyclerView$LayoutParams
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$AdapterDataObserver
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$SmoothScroller
android.support.v7.widget.RecyclerView$SmoothScroller +.. android.support.v7.widget.RecyclerView$SmoothScroller$Action
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$AdapterDataObservable
android.support.v7.widget.Observable <|-- android.support.v7.widget.RecyclerView$AdapterDataObservable
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$SavedState
android.support.v7.widget.BaseSavedState <|-- android.support.v7.widget.RecyclerView$SavedState
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$State
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$ItemAnimatorRestoreListener
android.support.v7.widget.ItemAnimatorListener <|.. android.support.v7.widget.RecyclerView$ItemAnimatorRestoreListener
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$ItemAnimator
android.support.v7.widget.RecyclerView$ItemAnimator +.. android.support.v7.widget.RecyclerView$ItemAnimator$ItemAnimatorListener
android.support.v7.widget.RecyclerView$ItemAnimator +.. android.support.v7.widget.RecyclerView$ItemAnimator$ItemAnimatorFinishedListener
android.support.v7.widget.RecyclerView +.. android.support.v7.widget.RecyclerView$ItemHolderInfo
android.support.v7.widget.Cloneable <|.. android.support.v7.widget.PositionMap
android.support.v7.widget.PositionMap +.. android.support.v7.widget.PositionMap$ContainerHelpers
@enduml